{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to this guide, we will be going through the introduction and necessity of a programming language and then through basic and intermediate python. A simple program to input your name and say Hello to you: name = input ( \"What is your name ?\" ) #This line takes the input print ( f \"Hello { name } \" ) #This line prints Hello along with name","title":"Home"},{"location":"conditional/","text":"Conditionals Need of conditions Say I am using the quadratic formula to find the square roots of a quadratic equation. The discriminant \u221a(b\u00b2-4ac) can be a positive, negative value or can be zero, but you don't want the value to be less than zero so you don't have to go into calculating imaginary and complex roots. Note Quadratic Formula is a formula that can be used to find the square roots of any quadratic equation. So you probably wanna check if the value is greater or equal to zero. So you may wanna do something like this in pseudocode: If Discriminant < 0{ print \"The value of discriminant is less that 0\" } So that is going to handle the problem for us. Conditionals in python Similarly in python we have a way to do this, python if...elif...else statement is very common in use however since python 3.10 a new conditional statement has been added, the match...case . Basic syntax of a if...elif...else statement : if...elif...else match...case if < condition - 1 > : #do something elif < condition - 2 > : #do something else elif < condition - 3 > : #do this instead else : #don't do all the stuff from before instead do this. match subject : case < pattern - 1 > : #<action-1> case < pattern - 2 > : #<action-2> case < pattern - 3 > : #<action-3> case _ : #<action-wildcard>","title":"Conditional"},{"location":"conditional/#conditionals","text":"","title":"Conditionals"},{"location":"conditional/#need-of-conditions","text":"Say I am using the quadratic formula to find the square roots of a quadratic equation. The discriminant \u221a(b\u00b2-4ac) can be a positive, negative value or can be zero, but you don't want the value to be less than zero so you don't have to go into calculating imaginary and complex roots. Note Quadratic Formula is a formula that can be used to find the square roots of any quadratic equation. So you probably wanna check if the value is greater or equal to zero. So you may wanna do something like this in pseudocode: If Discriminant < 0{ print \"The value of discriminant is less that 0\" } So that is going to handle the problem for us.","title":"Need of conditions"},{"location":"conditional/#conditionals-in-python","text":"Similarly in python we have a way to do this, python if...elif...else statement is very common in use however since python 3.10 a new conditional statement has been added, the match...case . Basic syntax of a if...elif...else statement : if...elif...else match...case if < condition - 1 > : #do something elif < condition - 2 > : #do something else elif < condition - 3 > : #do this instead else : #don't do all the stuff from before instead do this. match subject : case < pattern - 1 > : #<action-1> case < pattern - 2 > : #<action-2> case < pattern - 3 > : #<action-3> case _ : #<action-wildcard>","title":"Conditionals in python"},{"location":"data/","text":"Data Handling Truth Values Truth values are basically logical values of some data. It can have either of two values : True / False In python, except : False , \"\" , '' , '''''' , \"\"\"\"\"\" , None , 0 , {} , [] and () have a truth value as False . Truth Value of some data can be found out using bool(x) , where x is some data. Lets test it out : >>> bool ( \"Hello\" ) True >>> bool ( 0 ) False >>> bool ( None ) False >>> bool ( 1 ) True >>> bool ( 3.56 ) True >>> bool ([ 1 , 50 , 97 ]) True >>> bool ({}) False Logical Operators As discussed earlier the logical operators in python are : and , or , not . not Operator is the inverse operator it will invert every result (True becomes False and False Becomes True). >>> not True False >>> not False True or Operator Is an operator which returns True if either of the conditions specified is True . If both conditions specified are False then it returns False . >>> 5 > 3 or 2 < 1 True >>> 10 > 20 or 11 > 200 False >>> 1 < 2 or 2 < 3 #it will return True even if both conditions specified are True True and operator Returns True only if both conditions are True otherwise it will return False . >>> 5 > 3 and 2 < 1 False >>> 200 < 1 and 2 > 1 False >>> 1 == 1 and 500 != 21 True >>> 23 < 25 and 5 > 1 True Some Errors which do not show up These errors would show up when used individually but they are not read by python because : (i) the or operator only reads the second condition if the first condition is True 3 > 2 or a > b #a and b are not defined yet we are comparing them True >>> #no errors (ii) the and operator only reads the second condition if the second condition is False >>> 3 < 2 and a != b False >>> #no errors yet again Lets confirm that they do give errors if used individually: >>> a > b Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > NameError : name 'a' is not defined >>> a != b Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > NameError : name 'a' is not defined","title":"Data-Handling"},{"location":"data/#data-handling","text":"","title":"Data Handling"},{"location":"data/#truth-values","text":"Truth values are basically logical values of some data. It can have either of two values : True / False In python, except : False , \"\" , '' , '''''' , \"\"\"\"\"\" , None , 0 , {} , [] and () have a truth value as False . Truth Value of some data can be found out using bool(x) , where x is some data. Lets test it out : >>> bool ( \"Hello\" ) True >>> bool ( 0 ) False >>> bool ( None ) False >>> bool ( 1 ) True >>> bool ( 3.56 ) True >>> bool ([ 1 , 50 , 97 ]) True >>> bool ({}) False","title":"Truth Values"},{"location":"data/#logical-operators","text":"As discussed earlier the logical operators in python are : and , or , not .","title":"Logical Operators"},{"location":"data/#not-operator","text":"is the inverse operator it will invert every result (True becomes False and False Becomes True). >>> not True False >>> not False True","title":"not Operator"},{"location":"data/#or-operator","text":"Is an operator which returns True if either of the conditions specified is True . If both conditions specified are False then it returns False . >>> 5 > 3 or 2 < 1 True >>> 10 > 20 or 11 > 200 False >>> 1 < 2 or 2 < 3 #it will return True even if both conditions specified are True True","title":"or Operator"},{"location":"data/#and-operator","text":"Returns True only if both conditions are True otherwise it will return False . >>> 5 > 3 and 2 < 1 False >>> 200 < 1 and 2 > 1 False >>> 1 == 1 and 500 != 21 True >>> 23 < 25 and 5 > 1 True","title":"and operator"},{"location":"data/#some-errors-which-do-not-show-up","text":"These errors would show up when used individually but they are not read by python because : (i) the or operator only reads the second condition if the first condition is True 3 > 2 or a > b #a and b are not defined yet we are comparing them True >>> #no errors (ii) the and operator only reads the second condition if the second condition is False >>> 3 < 2 and a != b False >>> #no errors yet again Lets confirm that they do give errors if used individually: >>> a > b Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > NameError : name 'a' is not defined >>> a != b Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > NameError : name 'a' is not defined","title":"Some Errors which do not show up"},{"location":"install/","text":"Coming Soon...","title":"Installation"},{"location":"install/#coming-soon","text":"","title":"Coming Soon..."},{"location":"kicking_off/","text":"Kicking Off: DATATYPES Numeric Integer : All positive, negative integers in mathematics and 0. Examples: 1, 2, 3, -7, -11 Float : All rational numbers in mathematics. Examples: 0.23, 5.68, -2.56, -78.26 Complex : All complex numbers in mathematics. Examples: 5j, 2+7j, -8+2j. Note: In python, the imaginary number i is called j. Boolean Boolean Values (0 and 1). Examples: True, False Dictionary A special datatype, will be discussed later. Example: {\"hello\":\"world\",20:\"Good Morning\"} Set Another special datatype, will be discussed later. Example: {2,5,6} Sequence String : A sequence of characters. Examples: \"Hello\",\"World!\" List : Another important special datatype, will be discussed later. Example: [2,5,6] Tuple : Similar to a list, also will be discussed later on. Example: (19,30,11) VARIABLES A variable is a memory location that stores data. The data's type can be any in the all the datatypes or any different object (functions,custom datatypes etc.) Some rules of valid variable naming 1) Variable name should start with letter(a-z,A-Z) or underscore (_). Valid : a , _a , A Invalid : 1a 2) In variable name, no special characters allowed other than underscore (_). Valid : a_ , _a Invalid : a_*/ 3) Variables are case sensitive a and A are different, since variable names are case sensitive 4) Variable name can have numbers but not at the beginning A1 5) Variable name should not be a Python keyword.Keywords are also called as reserved words OPERATORS Arithmetic Operators : + , - , / , * , ** , // , % . Relational (Comparision) Operators : > , < == , >= , <= , != . Assignment Operators : = , := Augmented Operators : += , -= , /= , *= , //= , %= , **= . Logical Operators : and , or , not . Membership Operators : in , not in . Identity Operators : is , not is . Bitwise Operators : & , | , ^ , ~ , << , >> .","title":"Kicking Off"},{"location":"kicking_off/#kicking-off","text":"","title":"Kicking Off:"},{"location":"kicking_off/#datatypes","text":"","title":"DATATYPES"},{"location":"kicking_off/#numeric","text":"Integer : All positive, negative integers in mathematics and 0. Examples: 1, 2, 3, -7, -11 Float : All rational numbers in mathematics. Examples: 0.23, 5.68, -2.56, -78.26 Complex : All complex numbers in mathematics. Examples: 5j, 2+7j, -8+2j. Note: In python, the imaginary number i is called j.","title":"Numeric"},{"location":"kicking_off/#boolean","text":"Boolean Values (0 and 1). Examples: True, False","title":"Boolean"},{"location":"kicking_off/#dictionary","text":"A special datatype, will be discussed later. Example: {\"hello\":\"world\",20:\"Good Morning\"}","title":"Dictionary"},{"location":"kicking_off/#set","text":"Another special datatype, will be discussed later. Example: {2,5,6}","title":"Set"},{"location":"kicking_off/#sequence","text":"String : A sequence of characters. Examples: \"Hello\",\"World!\" List : Another important special datatype, will be discussed later. Example: [2,5,6] Tuple : Similar to a list, also will be discussed later on. Example: (19,30,11)","title":"Sequence"},{"location":"kicking_off/#variables","text":"A variable is a memory location that stores data. The data's type can be any in the all the datatypes or any different object (functions,custom datatypes etc.)","title":"VARIABLES"},{"location":"kicking_off/#some-rules-of-valid-variable-naming","text":"1) Variable name should start with letter(a-z,A-Z) or underscore (_). Valid : a , _a , A Invalid : 1a 2) In variable name, no special characters allowed other than underscore (_). Valid : a_ , _a Invalid : a_*/ 3) Variables are case sensitive a and A are different, since variable names are case sensitive 4) Variable name can have numbers but not at the beginning A1 5) Variable name should not be a Python keyword.Keywords are also called as reserved words","title":"Some rules of valid variable naming"},{"location":"kicking_off/#operators","text":"Arithmetic Operators : + , - , / , * , ** , // , % . Relational (Comparision) Operators : > , < == , >= , <= , != . Assignment Operators : = , := Augmented Operators : += , -= , /= , *= , //= , %= , **= . Logical Operators : and , or , not . Membership Operators : in , not in . Identity Operators : is , not is . Bitwise Operators : & , | , ^ , ~ , << , >> .","title":"OPERATORS"},{"location":"programming_language/","text":"Introduction to a programming language Here you will learn about a programming language ( What they are ?, Why are they necessary ?, Some examples of programming languages and the types of programming language.) What is a programming language ? A programming language is a set of instructions written in form of strings to the computer. Why a programming language ? A computer cannot simply understand instructions such as subtract 5 from 8 or add 100 and 2 . So a programming language converts the strings into a computer readable form and executes them. Types of programming languages Procedural Programming Language Functional Programming Language Scripting Programming Language Logic Programming Language Object-Oriented Programming Language Examples of programming languages Some examples of programming language are : Python, Javascript, C, C++, Java, Rust, Ruby, Typescript etc. Hello World program in a few languages : You can find more here C C++ Javascript / Typescript Python #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } console . log ( \"Hello World\" ) print ( \"Hello World\" ) COMMENTS A comment is used to explain a part of the program to the user. It is generally ignored by compilers and interpreters. C / C++ / Java / Go / Rust / PHP / Kotlin / JS / TS Ruby Haskell Python // This is a single line comment /* This is slightly long multi line comment*/ #single line comment in Ruby =begin This is slightly long multi line comment in Ruby =end \u2013 \u2013 single line comment in Haskell {- longer comment : multi line comment in Haskell -} #hello comment 1 in python #comment 2 in python","title":"Programming Language"},{"location":"programming_language/#introduction-to-a-programming-language","text":"Here you will learn about a programming language ( What they are ?, Why are they necessary ?, Some examples of programming languages and the types of programming language.)","title":"Introduction to a programming language"},{"location":"programming_language/#what-is-a-programming-language","text":"A programming language is a set of instructions written in form of strings to the computer.","title":"What is a programming language ?"},{"location":"programming_language/#why-a-programming-language","text":"A computer cannot simply understand instructions such as subtract 5 from 8 or add 100 and 2 . So a programming language converts the strings into a computer readable form and executes them.","title":"Why a programming language ?"},{"location":"programming_language/#types-of-programming-languages","text":"Procedural Programming Language Functional Programming Language Scripting Programming Language Logic Programming Language Object-Oriented Programming Language","title":"Types of programming languages"},{"location":"programming_language/#examples-of-programming-languages","text":"Some examples of programming language are : Python, Javascript, C, C++, Java, Rust, Ruby, Typescript etc.","title":"Examples of programming languages"},{"location":"programming_language/#hello-world-program-in-a-few-languages","text":"You can find more here C C++ Javascript / Typescript Python #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } console . log ( \"Hello World\" ) print ( \"Hello World\" )","title":"Hello World program in a few languages :"},{"location":"programming_language/#comments","text":"A comment is used to explain a part of the program to the user. It is generally ignored by compilers and interpreters. C / C++ / Java / Go / Rust / PHP / Kotlin / JS / TS Ruby Haskell Python // This is a single line comment /* This is slightly long multi line comment*/ #single line comment in Ruby =begin This is slightly long multi line comment in Ruby =end \u2013 \u2013 single line comment in Haskell {- longer comment : multi line comment in Haskell -} #hello comment 1 in python #comment 2 in python","title":"COMMENTS"},{"location":"python_introduction/","text":"Python is a object oriented , functional , structured , reflective , dynamic typed , high-level , interpreted , general purpose language created back in 1994 by Guido Van Rossum. Python is written in the C programming language , that is why it is known as Cpython however there are other distros of python. Examples : ipython , jpython etc, we are mainly going to be talking about Cpython in this guide. Python based on usage index is a very popular language, it is second most used after javascript and it maybe the most learned language as it has a very easy syntax (one of the easiest as compared to other languages). Python has wide application in web development , AI , machine learning , operating systems , mobile application development , data science and game development etc. Usefull links : Python Official Site Cpython github repository Python Documentation Python Enhancement Proposals","title":"Introduction to python"},{"location":"python_introduction/#usefull-links","text":"Python Official Site Cpython github repository Python Documentation Python Enhancement Proposals","title":"Usefull links :"},{"location":"strings/","text":"Strings Strings in python are a very essential datatype and other programming languages too, its a sequence of characters in python. Single-line and Multi-line strings Single-line strings string = \"Hello World\" #this is an example of a string, it uses \"\" another_string = 'Hi World' #this is another example of a string, using '' Multiline-line strings First_multiline_string = \"\"\"Hello World \\n How are you doing \"\"\" # \\n is a special character ( escape sequence character ). Second_multiline_string = '''Hi World \\n How are you doing ''' Using type() function on a string >>> type ( string ) < class ' str '> >>> type ( another_string ) < class ' str '> >>> type ( First_multiline_string ) < class ' str '> >>> type ( Second_multiline_string ) < class ' str '> Finding length of a string We can use the len function to find the length of a string. >>> len ( string ) 11 >>> len ( another_string ) 8 >>> len ( First_multiline_string ) 32 >>> len ( Second_multiline_string ) 29 String Indexing and String Slicing String Indexing >>> text = \"Hello\" >>> text [ 0 ] #this is going to get the first character of the string 'H' >>> text [ 1 ] #this is going to get the second character of the string 'e' >>> text [ 4 ] #this is going to get the fifth character of the string 'o' >>> text [ - 1 ] #this is going to get the last character of the string 'o' >>> text [ - 5 ] #this is going to get the fifth character of the string from the first 'H' 0 and Positive indexing : 0 1 2 3 4 Word : H e l l o Negative Indexing : -5 -4 -3 -2 -1 String Indexing starts from 0 and goes upto (length of string - 1) . Negative indexing starts from -(length of string) upto -1 Lets see another example : >>> \"Python is a very popular language\" [ 0 ] 'P' >>> \"Python was created by Guido Van Rossum\" [ - 1 ] 'm' >>> \"Python has a very easy syntax\" [ 13 ] 'v'","title":"Strings"},{"location":"strings/#strings","text":"Strings in python are a very essential datatype and other programming languages too, its a sequence of characters in python.","title":"Strings"},{"location":"strings/#single-line-and-multi-line-strings","text":"","title":"Single-line and Multi-line strings"},{"location":"strings/#single-line-strings","text":"string = \"Hello World\" #this is an example of a string, it uses \"\" another_string = 'Hi World' #this is another example of a string, using ''","title":"Single-line strings"},{"location":"strings/#multiline-line-strings","text":"First_multiline_string = \"\"\"Hello World \\n How are you doing \"\"\" # \\n is a special character ( escape sequence character ). Second_multiline_string = '''Hi World \\n How are you doing '''","title":"Multiline-line strings"},{"location":"strings/#using-type-function-on-a-string","text":">>> type ( string ) < class ' str '> >>> type ( another_string ) < class ' str '> >>> type ( First_multiline_string ) < class ' str '> >>> type ( Second_multiline_string ) < class ' str '>","title":"Using type() function on a string"},{"location":"strings/#finding-length-of-a-string","text":"We can use the len function to find the length of a string. >>> len ( string ) 11 >>> len ( another_string ) 8 >>> len ( First_multiline_string ) 32 >>> len ( Second_multiline_string ) 29","title":"Finding length of a string"},{"location":"strings/#string-indexing-and-string-slicing","text":"","title":"String Indexing and String Slicing"},{"location":"strings/#string-indexing","text":">>> text = \"Hello\" >>> text [ 0 ] #this is going to get the first character of the string 'H' >>> text [ 1 ] #this is going to get the second character of the string 'e' >>> text [ 4 ] #this is going to get the fifth character of the string 'o' >>> text [ - 1 ] #this is going to get the last character of the string 'o' >>> text [ - 5 ] #this is going to get the fifth character of the string from the first 'H' 0 and Positive indexing : 0 1 2 3 4 Word : H e l l o Negative Indexing : -5 -4 -3 -2 -1 String Indexing starts from 0 and goes upto (length of string - 1) . Negative indexing starts from -(length of string) upto -1 Lets see another example : >>> \"Python is a very popular language\" [ 0 ] 'P' >>> \"Python was created by Guido Van Rossum\" [ - 1 ] 'm' >>> \"Python has a very easy syntax\" [ 13 ] 'v'","title":"String Indexing"}]}